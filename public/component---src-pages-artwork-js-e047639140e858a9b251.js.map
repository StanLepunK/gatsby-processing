{"version":3,"sources":["webpack://gatsby-starter-default/./src/pages/artwork.js"],"names":["Artwork_wrapper","P5Wrapper","Button_refresh","style","position","ComponentBuffer","comp","label","what","buf","value","props","x","useContext","P5StateContext","useState","state_data","set_data","sketch","my_sketch_background","data","p5","bg_color","shape_color","ref","size","createVector","pos","angle","set_shape","color","random","set","width","height","y","TAU","setup","createCanvas","windowWidth","windowHeight","windowResized","resizeCanvas","draw","noStroke","new_ref","background","fill","push","translate","rotate","rect","pop"],"mappings":"kMAUMA,GAAkBC,OAAU,cAC5BC,GAAiBD,OAAU,WAgBjC,UAdgB,kBACd,gCACE,gBAAC,KAAD,KACE,uBAAKE,MAAO,CAAEC,SAAU,aACtB,gBAACC,EAAD,CAAiBC,KAAMN,KAEzB,uBAAKG,MAAO,CAAEC,SAAU,aACtB,gBAAC,IAAD,MACA,gBAAC,IAAD,CAAYE,KAAMJ,EAAgBK,MAAM,UAAUC,KAAK,cAQ/D,IAAIC,EAAM,CACRC,MAAO,GAGT,SAASL,EAAgBM,GACvB,IAAQC,GAAMC,gBAAWC,MAAjBF,EACR,GAA+BG,cAASN,GAAjCO,EAAP,KAAmBC,EAAnB,KAMA,OALIL,IAAMI,EAAWN,QACnBD,EAAIC,MAAQE,EACZK,EAASR,IAIT,gBAACE,EAAML,KAAP,CAAYY,OAAQC,EAAsBC,KAAMJ,IASpD,SAASG,EAAqBE,GAC5B,IACIC,EACAC,EAFAC,GAAO,EAGPC,EAAOJ,EAAGK,aAAa,EAAG,GAC1BC,EAAMN,EAAGK,aAAa,EAAG,GACzBE,EAAQ,EAiCZ,SAASC,IACPN,EAAcF,EAAGS,MAAMT,EAAGU,OAAO,KAAMV,EAAGU,OAAO,KAAMV,EAAGU,OAAO,MACjEN,EAAKO,IACHX,EAAGU,OAAOV,EAAGY,MAAQ,GAAe,EAAXZ,EAAGY,OAC5BZ,EAAGU,OAAOV,EAAGa,OAAS,GAAgB,EAAZb,EAAGa,SAE/BP,EAAIK,IAAIX,EAAGY,MAAQ,EAAIR,EAAKb,EAAI,EAAGS,EAAGa,OAAS,EAAIT,EAAKU,EAAI,GAC5DP,EAAQP,EAAGU,OAAOV,EAAGe,KAvCvBf,EAAGgB,MAAQ,WACThB,EAAGiB,aAAajB,EAAGkB,YAAalB,EAAGmB,cACnCnB,EAAGoB,cAAgB,WACjBpB,EAAGqB,aAAarB,EAAGkB,YAAalB,EAAGmB,eAErClB,EAAWD,EAAGS,MAAMT,EAAGU,OAAO,KAAMV,EAAGU,OAAO,KAAMV,EAAGU,OAAO,MAC9DF,KAGFR,EAAGsB,KAAO,WACRtB,EAAGuB,WACH,IAAIC,EAAUxB,EAAGD,KAAKV,MAClBc,IAAQqB,IACVvB,EAAWD,EAAGS,MAAMT,EAAGU,OAAO,KAAMV,EAAGU,OAAO,KAAMV,EAAGU,OAAO,MAC9DF,IACAL,EAAMqB,GAGRxB,EAAGyB,WAAWxB,GACdD,EAAG0B,KAAKxB,GACRF,EAAG2B,OACH3B,EAAG4B,UAAU5B,EAAGY,MAAQ,EAAGZ,EAAGa,OAAS,GACvCb,EAAG2B,OACH3B,EAAG6B,OAAOtB,GAEVP,EAAG4B,WAAWxB,EAAKb,EAAI,GAAIa,EAAKU,EAAI,GAEpCd,EAAG8B,KAAK,EAAG,EAAG1B,EAAKb,EAAGa,EAAKU,GAC3Bd,EAAG+B","file":"component---src-pages-artwork-js-e047639140e858a9b251.js","sourcesContent":["import React from \"react\";\nimport { useState, useContext } from \"react\";\n// app\n// p5\nimport { Menu } from \"../components/menu\";\nimport P5Wrapper from \"../components/P5Wrapper\";\nimport P5Manager from \"../components/P5Manager\";\nimport { P5DispatchContext, P5StateContext } from \"../components/P5Manager\";\nimport { MenuButton } from \"../components/menuButton\";\n\nconst Artwork_wrapper = P5Wrapper(\"my artwork\");\nconst Button_refresh = P5Wrapper(\"refresh\");\n\nconst ArtWork = () => (\n  <>\n    <P5Manager>\n      <div style={{ position: \"absolute\" }}>\n        <ComponentBuffer comp={Artwork_wrapper} />\n      </div>\n      <div style={{ position: \"absolute\" }}>\n        <Menu></Menu>\n        <MenuButton comp={Button_refresh} label=\"REFRESH\" what=\"add_x\" />\n      </div>\n    </P5Manager>\n  </>\n);\n\nexport default ArtWork;\n\nlet buf = {\n  value: 0,\n};\n\nfunction ComponentBuffer(props) {\n  const { x } = useContext(P5StateContext);\n  const [state_data, set_data] = useState(buf);\n  if (x !== state_data.value) {\n    buf.value = x;\n    set_data(buf);\n  }\n\n  return (\n    <props.comp sketch={my_sketch_background} data={state_data}></props.comp>\n  );\n}\n\n/**\n *\n * P5JS / PROCESSING SKETCH\n *\n */\nfunction my_sketch_background(p5) {\n  let ref = -1;\n  let bg_color;\n  let shape_color;\n  let size = p5.createVector(0, 0);\n  let pos = p5.createVector(0, 0);\n  let angle = 0;\n  p5.setup = function () {\n    p5.createCanvas(p5.windowWidth, p5.windowHeight);\n    p5.windowResized = () => {\n      p5.resizeCanvas(p5.windowWidth, p5.windowHeight);\n    };\n    bg_color = p5.color(p5.random(255), p5.random(255), p5.random(255));\n    set_shape();\n  };\n\n  p5.draw = function () {\n    p5.noStroke();\n    let new_ref = p5.data.value;\n    if (ref !== new_ref) {\n      bg_color = p5.color(p5.random(255), p5.random(255), p5.random(255));\n      set_shape();\n      ref = new_ref;\n    }\n\n    p5.background(bg_color);\n    p5.fill(shape_color);\n    p5.push();\n    p5.translate(p5.width / 2, p5.height / 2);\n    p5.push();\n    p5.rotate(angle);\n    // p5.rotate(p5.map(p5.mouseX, 0, p5.width, 0, p5.TAU));\n    p5.translate(-size.x / 2, -size.y / 2);\n\n    p5.rect(0, 0, size.x, size.y);\n    p5.pop();\n  };\n\n  // MES FUNCTION\n  function set_shape() {\n    shape_color = p5.color(p5.random(255), p5.random(255), p5.random(255));\n    size.set(\n      p5.random(p5.width / 20, p5.width * 2),\n      p5.random(p5.height / 20, p5.height * 2)\n    );\n    pos.set(p5.width / 2 - size.x / 2, p5.height / 2 - size.y / 2);\n    angle = p5.random(p5.TAU);\n  }\n}\n"],"sourceRoot":""}